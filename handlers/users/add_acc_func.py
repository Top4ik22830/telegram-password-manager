from aiogram import types
from aiogram.dispatcher.filters import ChatTypeFilter, Text
from aiogram.dispatcher import FSMContext

from utils.db_api import sqliter
from utils.file_manager import generate_password
from utils.create_acc_obj import AccountData
from loader import dp, bot
from states.create_account import AccountStates
from keyboards.default.text_keys import pass_key, markup_yesno, empty


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Å–µ—Ä–≤–∏—Å–∞
@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=AccountStates.create_service)
async def service_name_controller(message: types.Message, state: FSMContext):

    await state.update_data(service_name=message.text.lower().strip())
    print(f"—É–¥–∞–ª—è–µ–º = {message.message_id}")
    await bot.delete_message(message.chat.id, message_id=message.message_id)
    await bot.delete_message(message.chat.id, message_id=message.message_id-1)
    # TODO: –í–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    await message.answer('–ó–∞–ø–∏—Å–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ')
    await AccountStates.create_web_site.set()
    await message.answer('–ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å web-—Å–∞–π—Ç–∞ –∏–ª–∏ –¥–æ–ø. –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞. –ò–ª–∏ –ø–æ—Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫ "-"')
    print(f"–∞–π–¥–∏ —Ç–µ–∫—É—â = {message.message_id}")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º web-site
@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=AccountStates.create_web_site)
async def web_site_controller(message: types.Message, state: FSMContext):

    await state.update_data(web_site=message.text.lower().strip())
    print(f"—É–¥–∞–ª—è–µ–º = {message.message_id}")
    await bot.delete_message(message.chat.id, message_id=message.message_id)
    await bot.delete_message(message.chat.id, message_id=message.message_id-1)
    # TODO: –í–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    await message.answer('–ó–∞–ø–∏—Å–∞–ª –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
    await AccountStates.create_login.set()
    await message.answer('–ù–∞–ø–∏—à–∏ –ª–æ–≥–∏–Ω')
    print(f"–∞–π–¥–∏ —Ç–µ–∫—É—â = {message.message_id}")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º login
@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=AccountStates.create_login)
async def login_controller(message: types.Message, state: FSMContext):

    await state.update_data(login=message.text.lower().strip())
    await bot.delete_message(message.chat.id, message_id=message.message_id)
    await bot.delete_message(message.chat.id, message_id=message.message_id-1)
    # TODO: –í–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    await message.answer('–ó–∞–ø–∏—Å–∞–ª –ª–æ–≥–∏–Ω')
    await AccountStates.create_mail.set()
    await message.answer('–ù–∞–ø–∏—à–∏ –ø–æ—á—Ç—É. –ò–ª–∏ –ø–æ—Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫ "-"')

# –°–æ—Ö—Ä–∞–Ω—è–µ–º mail
@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=AccountStates.create_mail)
async def mail_controller(message: types.Message, state: FSMContext):

    await state.update_data(mail=message.text.lower().strip())
    await bot.delete_message(message.chat.id, message_id=message.message_id)
    await bot.delete_message(message.chat.id, message_id=message.message_id-1)
    # TODO: –í–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    await message.answer('–ó–∞–ø–∏—Å–∞–ª –ø–æ—á—Ç—É')
    await AccountStates.create_password.set()
    await message.answer('–ù–∞–ø–∏—à–∏ –ø–∞—Ä–æ–ª—å –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ–±–µ –ø–∞—Ä–æ–ª—å', reply_markup=pass_key)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º password
@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=AccountStates.create_password)
async def password_controller(message: types.Message, state: FSMContext):

    if message.text == "–ü–æ–ª—É—á–∏—Ç—åüõ†–ø–∞—Ä–æ–ª—å":
        # TODO: Generate a pasword & save in var [DONE]
        passw = await generate_password()
    else:
        passw = message.text.strip()

    await state.update_data(password=passw)
    await bot.delete_message(message.chat.id, message_id=message.message_id)
    await bot.delete_message(message.chat.id, message_id=message.message_id-1)
    # TODO: –í–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    await message.answer('–ó–∞–ø–∏—Å–∞–ª –ø–∞—Ä–æ–ª—å')
    await AccountStates.create_keys_on.set()
    await message.answer('–ù–∞–ø–∏—à–∏ –≤—Å–µ –∫–ª—é—á–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª(!), –µ—Å–ª–∏ –µ—Å—Ç—å. –ò–ª–∏ –ø–æ—Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫ -', reply_markup=empty)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º keys
@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=AccountStates.create_keys_on)
async def keys_controller(message: types.Message, state: FSMContext):

    await state.update_data(keys=message.text.strip())
    await bot.delete_message(message.chat.id, message_id=message.message_id)
    await bot.delete_message(message.chat.id, message_id=message.message_id-1)
    # TODO: –í–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    await message.answer('–ó–∞–ø–∏—Å–∞–ª –∫–ª—é—á–∏')
    await AccountStates.end.set()
    await message.answer('–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ')
    
    data = await state.get_data()
    text = ("–ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç:\n",
            f"–ù–∞–∑–≤–∞–Ω–∏–µ:\n{data['service_name']}\n",
            f"–î–æ–ø. –∞–¥—Ä–µ—Å:\n{data['web_site']}\n",
            f"–õ–æ–≥–∏–Ω:\n{data['login']}\n",
            f"–ü–æ—á—Ç–∞:\n{data['mail']}\n",
            f"–ü–∞—Ä–æ–ª—å:\n{data['password']}\n",
            f"–ö–ª—é—á–∏:\n{data['keys']}",)
    
    await message.answer("\n".join(text))
    await message.answer("–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=markup_yesno)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–¥ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã
@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=AccountStates.end)
async def cancel_adding(message: types.Message, state: FSMContext):

    if message.text == "‚ûñ –ù–µ—Ç":
        # TODO: clear data and states
        # TODO: restart proccess
        await state.finish()
        await AccountStates.create_service.set()
        await bot.delete_message(message.chat.id, message_id=message.message_id-2)
        await bot.delete_message(message.chat.id, message_id=message.message_id-1)
        await bot.delete_message(message.chat.id, message_id=message.message_id)
        await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEDbHRhrkPCwIJKsWGL51rhQOI28ZG_IgACAgADSEWjHtkwR19ppkyxIgQ')
        await bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')

    elif message.text == "‚ûï –î–∞":
        # TODO: save data to DB
        dat = await state.get_data()
        data = AccountData(
                service_name=dat['service_name'], 
                web_site=dat['web_site'], 
                login=dat['login'], 
                mail=dat['mail'], 
                password=dat['password'], 
                keys=dat['keys']
                )
        await sqliter.create_account(message.from_user.id, data)

        # TODO: finish all states [DONE]
        await state.finish()
        
        await bot.delete_message(message.chat.id, message_id=message.message_id-2)
        await bot.delete_message(message.chat.id, message_id=message.message_id-1)
        await bot.delete_message(message.chat.id, message_id=message.message_id)
        await bot.send_message(message.chat.id, '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–ø–∏—Å–∞–Ω!')
